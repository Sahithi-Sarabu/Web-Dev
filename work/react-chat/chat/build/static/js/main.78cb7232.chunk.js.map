{"version":3,"sources":["Login.jsx","services.js","Logout.jsx","ChatDisplay.jsx","SendMessage.jsx","Chat.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Login","onLogin","setError","useState","username","setUsername","useEffect","className","onChange","e","target","value","placeholder","onClick","fetch","method","headers","body","JSON","stringify","name","catch","Promise","reject","error","then","response","ok","json","err","fetchLogin","userInfo","Logout","onLogout","ChatDisplay","users","messages","userList","Object","values","map","user","key","toString","messageList","message","time","SendMessage","onSend","setUserState","setMessage","fetchMessage","messagesList","isLoggedIn","Chat","setUsers","setMessages","getUsers","getMessages","App","userState","userName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.78cb7232.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchLogin } from './services';\r\n\r\nconst Login = ({ onLogin, setError }) => {\r\n    const [username, setUsername] = useState('');\r\n\r\n    const performLogin = () =>{\r\n        const name = username;\r\n        fetchLogin(name)\r\n        .then( userInfo => {\r\n            onLogin(userInfo);\r\n        })\r\n        .catch( (err) =>{\r\n            setError(err.error);\r\n        });\r\n    };\r\n\r\n    useEffect( () => {\r\n        setError('');\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <input className=\"user-name\" onChange={ (e) => setUsername(e.target.value)} placeholder=\"Enter name\"/>\r\n            <button className=\"add-user\" onClick={ performLogin }>Login</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","export const fetchLoginStatus = () =>{\r\n    return fetch('/session',{\r\n        method:'GET',\r\n      })\r\n      .catch( () => Promise.reject({ error: 'network-error' }))\r\n      .then( (response) =>{\r\n        if(!response.ok){\r\n          return Promise.reject({ error: 'login-invalid' });\r\n        }\r\n        return;\r\n    });\r\n}\r\n\r\nexport const fetchLogin = (username) =>{\r\n    return fetch('/session',{\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: username }),\r\n    })\r\n    .catch( () => Promise.reject({ error: 'network-error'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchMessage = (message) =>{\r\n    return fetch('/messages',{\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({ message: message}),\r\n    })\r\n    .catch( () => Promise.reject({ error: 'network-error'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchLogout = () => {\r\n    return fetch('/session', {\r\n        method: 'DELETE',\r\n    })\r\n    .catch( () => Promise.reject({ error: 'network-error'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return Promise.reject({ error: 'Error logging out'})\r\n        }\r\n        return;\r\n    });\r\n}\r\n\r\nexport const fetchUsers = () =>{\r\n    return fetch('/users', {\r\n        method: 'GET',\r\n    })\r\n    .catch( () => Promise.reject( {error: 'network-error'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then(err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchMessages = () =>{\r\n    return fetch('/messages', {\r\n        method: 'GET',\r\n    })\r\n    .catch( () => Promise.reject( {error: 'network-error'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then(err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}","import React from 'react';\r\nimport { fetchLogout } from './services';\r\n\r\nconst Logout = ({ onLogout, setError }) =>{\r\n\r\n    const performLogout = () =>{\r\n        fetchLogout()\r\n        .then( () => onLogout() )\r\n        .catch( (err) =>{  \r\n            setError(err.error);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"logout\">\r\n            <button className=\"logout-button\" onClick={ performLogout }>Logout</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logout;","import React from 'react';\r\n\r\nconst ChatDisplay = ({ users, messages }) =>{\r\n\r\n    const userList = Object.values(users).map( (user) => \r\n        <li key={user.toString()}>\r\n            <span className=\"user\">{user}</span>\r\n        </li>\r\n    );\r\n\r\n    const messageList = Object.values(messages).map( (message) =>\r\n        <li key={message.user + message.time}>\r\n        <div className=\"user-info\">\r\n          <span className=\"user-name\">{message.user}</span>\r\n          <span className=\"time\">{message.time}</span>\r\n        </div>\r\n        <span className=\"message\">{message.message}</span>\r\n        </li>\r\n    );\r\n\r\n    return (\r\n        <div className=\"chat-content\">\r\n            <ul className=\"users\">{ userList }</ul>\r\n            <ul className=\"messages\">{ messageList }</ul>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ChatDisplay;","import React, { useState } from 'react';\r\nimport { fetchMessage} from './services';\r\n\r\nconst SendMessage = ({ onSend, setError, setUserState }) => {\r\n    const [message, setMessage] = useState('');\r\n\r\n    const sendMessage = (e) =>{\r\n        fetchMessage(message)\r\n        .then( messagesList =>{\r\n            onSend(messagesList);\r\n            setMessage('');\r\n        })\r\n        .catch( err =>{\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    const onInput = (e) =>{\r\n        setMessage(e.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"to-send\">\r\n            <input className=\"new-message\" value={ message } onChange={ onInput } placeholder=\"Enter message\"/>\r\n            <button className=\"add\" onClick={ sendMessage }>Send</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SendMessage;","import React, { useEffect, useState } from 'react';\r\nimport { fetchUsers, fetchMessages,} from './services';\r\nimport Logout from './Logout';\r\nimport ChatDisplay from './ChatDisplay';\r\nimport SendMessage from './SendMessage';\r\n\r\nconst Chat = ({setUserState, setError }) =>{\r\n    const [users, setUsers] = useState([]);\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const getUsers = () =>{\r\n        fetchUsers()\r\n        .then( userList =>{\r\n            setUsers(userList);\r\n        })\r\n        .catch( err =>{\r\n            setError(err.error);\r\n        });\r\n    };\r\n\r\n    const getMessages = () => {\r\n        fetchMessages()\r\n        .then( messageList =>{\r\n            setMessages(messageList);\r\n        })\r\n        .catch(err =>{\r\n            setError(err.error);\r\n        });\r\n    };\r\n\r\n    const logout = ()=>{\r\n        setUserState({\r\n            isLoggedIn: false\r\n        });\r\n    };\r\n\r\n    const send = (messagesList) =>{\r\n        setMessages(messagesList);\r\n    }\r\n\r\n    useEffect( () => {\r\n        getUsers();\r\n        getMessages();\r\n        setError('');\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <h2>Chat On</h2>\r\n            <div className=\"chat-area\">\r\n                <Logout onLogout={ logout } setError={ setError }/>\r\n                <SendMessage onSend={ send } setError={ setError } setUserState = {setUserState}/>\r\n                <ChatDisplay users={ users } messages={ messages }/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Chat;","import React, {useState, useEffect } from 'react';\nimport './App.css';\nimport { fetchLoginStatus } from './services';\nimport Login from './Login';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [userState, setUserState] = useState({ isLoggedIn: false});\n  const [error, setError] = useState('');\n\n  useEffect( () => {\n    fetchLoginStatus()\n    .then( (userName) =>{\n      setUserState({ \n        isLoggedIn: true,\n        username: userName,\n      })\n    })\n  }, []);\n\n  const login = (username) =>{\n    setUserState({ \n      isLoggedIn: true,\n      username\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      {userState.isLoggedIn ? <Chat setUserState={ setUserState } setError={ setError }/> : <Login onLogin={ login } setError={ setError }/> }\n      <p className =\"status\">{ error }</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}