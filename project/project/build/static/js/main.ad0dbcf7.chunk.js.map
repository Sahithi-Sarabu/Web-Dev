{"version":3,"sources":["services.js","Explore.jsx","Home.jsx","Profile.jsx","Logout.jsx","Options.jsx","TweetDisplay.jsx","HomePage.jsx","Login.jsx","ProfilePage.jsx","ExplorePage.jsx","TweetDetailsPage.jsx","OtherUserProfilePage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["fetchUserTweets","userId","fetch","method","catch","Promise","reject","error","then","response","ok","json","err","fetchUserSpecificTweets","fetchTweet","tweetId","fetchAllTweets","updateLikes","fetchProfileDetails","deleteTweet","Explore","setHomePage","setExplorePage","setProfilePage","setOtherUserPage","setTweetDetailsPage","className","onClick","isOtherPage","isTweetDetailsPage","src","alt","Home","Profile","Logout","onLogout","setError","console","log","Options","setUserState","isLoggedIn","TweetDisplay","isProfilePage","otherUserPage","isExplorePage","userState","tweets","setAllTweets","changeLikes","e","target","dataset","id","tweetList","otherUser","deleteGiven","changePage","showDetails","preventDefault","Object","values","map","tweet","key","time","user","href","data-id","lapsed","Date","now","Math","floor","date","getMonth","getDate","getFullYear","convertTime","likes","deleteButton","HomePage","useState","setTweet","allTweets","useEffect","interval","setInterval","tweetsList","clearInterval","placeholder","onChange","value","maxLength","headers","body","JSON","stringify","postTweet","disabled","Login","onLogin","username","setUsername","name","fetchLogin","userInfo","ProfilePage","profileDetails","setProfileDetails","profile","following","length","followers","ExplorePage","TweetDetailsPage","tweetDetailsPage","tweetInfo","setTweetInfo","OtherUserProfilePage","userDetails","setuserDetails","otherUserId","includes","App","isHomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ad0dbcf7.chunk.js","sourcesContent":["export const fetchLoginStatus = () =>{\r\n    return fetch('/session',{\r\n        method:'GET',\r\n      })\r\n      .catch( () => Promise.reject({ error: 'Cannot connect to Server' }))\r\n      .then( (response) =>{\r\n        if(!response.ok){\r\n          return Promise.reject({ error: 'login-invalid' });\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchLogin = (username) =>{\r\n    return fetch('/session',{\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: username}),\r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchLogout = () => {\r\n    return fetch('/session', {\r\n        method: 'DELETE',\r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return Promise.reject({ error: 'Error logging out'})\r\n        }\r\n        return;\r\n    });\r\n}\r\n\r\nexport const postTweet = (tweet) => {\r\n    return fetch('/tweet',{\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ tweet: tweet }),\r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchUserTweets = (userId) => {\r\n    return fetch(`/tweet/${userId}`,{\r\n        method: 'GET',    \r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchUserSpecificTweets = (userId) => {\r\n    return fetch(`/userTweet/${userId}`,{\r\n        method: 'GET',    \r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchTweet = (tweetId) => {\r\n    return fetch(`/tweetInfo/${tweetId}`,{\r\n        method:'GET',\r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchAllTweets = () => {\r\n    return fetch('/allTweets', {\r\n        method: 'GET',\r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const updateLikes = (tweetId) => {\r\n    return fetch(`/tweet/${tweetId}`,{\r\n        method: 'PUT',\r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return;\r\n    });\r\n}\r\n\r\nexport const updateFollowStatus = (otherUserId) => {\r\n    return fetch('/tweet' , {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ otherUser: otherUserId }),\r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const fetchProfileDetails = (userId) => {\r\n    return fetch(`/profileDetails/${userId}`, {\r\n        method: 'GET',\r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return response.json().then( err => Promise.reject(err));\r\n        }\r\n        return response.json();\r\n    });\r\n}\r\n\r\nexport const deleteTweet = (tweetId) => {\r\n    return fetch(`/tweet/${tweetId}`, {\r\n        method: 'DELETE',\r\n    })\r\n    .catch( () => Promise.reject({ error: 'Cannot connect to Server'}))\r\n    .then( (response) => {\r\n        if(!response.ok){\r\n            return Promise.reject({ error: 'Cannot delete Tweet'})\r\n        }\r\n        return;\r\n    });\r\n}","import React from 'react';\r\n\r\nconst Explore = ({setHomePage, setExplorePage, setProfilePage,setOtherUserPage,\r\n   setTweetDetailsPage}) => {\r\n   const changePage = () => {\r\n      setExplorePage(true);\r\n      setHomePage(false);\r\n      setProfilePage(false);\r\n      setOtherUserPage({\r\n         isOtherPage: false\r\n      })\r\n      setTweetDetailsPage({\r\n         isTweetDetailsPage:false\r\n      })\r\n   }\r\n     return (\r\n        <button className=\"button\" onClick={changePage}><img src=\"/explore.png\" alt=\"avatar\" className=\"image\"></img>Explore</button>\r\n     )\r\n};\r\n\r\nexport default Explore;","import React from 'react';\r\n\r\nconst Home = ({setHomePage, setExplorePage, setProfilePage, setOtherUserPage, \r\n    setTweetDetailsPage}) => {\r\n    const changePage = () => {\r\n        setHomePage(true);\r\n        setProfilePage(false);\r\n        setExplorePage(false);\r\n        setOtherUserPage({\r\n            isOtherPage:false\r\n        })\r\n        setTweetDetailsPage({\r\n            isTweetDetailsPage:false\r\n        })\r\n    }\r\n    return (\r\n        <button className=\"button\" onClick={changePage}><img src=\"/home.png\" alt=\"avatar\" className=\"image\"></img>Home</button>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Profile = ({setHomePage, setExplorePage, setProfilePage,setOtherUserPage, \r\n    setTweetDetailsPage}) => {\r\n    const changePage = () => {\r\n        setProfilePage(true);\r\n        setHomePage(false);\r\n        setExplorePage(false);\r\n        setOtherUserPage({\r\n            isOtherPage:false\r\n        })\r\n        setTweetDetailsPage({\r\n            isTweetDetailsPage:false\r\n        })\r\n    }\r\n\r\n    return (\r\n        <button className=\"button\" onClick={changePage}><img src=\"/avatar.png\" alt=\"avatar\" className=\"image\"></img>Profile</button>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { fetchLogout } from './services';\r\n\r\nconst Logout = ({ onLogout, setError }) =>{\r\n\r\n    const performLogout = () =>{\r\n        fetchLogout()\r\n        .then( () => onLogout() )\r\n        .catch( (err) =>{ \r\n            console.log(err.error); \r\n            setError(err.error);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <button className=\"button\" onClick={ performLogout }>Logout</button>\r\n    )\r\n}\r\n\r\nexport default Logout;","import React from 'react';\r\nimport Explore from './Explore';\r\nimport Home from './Home';\r\nimport Profile from './Profile';\r\nimport Logout from './Logout';\r\n\r\nconst Options = ({setUserState, setError, setHomePage , setProfilePage, setExplorePage, \r\n    setOtherUserPage, setTweetDetailsPage}) => {\r\n\r\n    const logout = ()=>{\r\n        setUserState({\r\n            isLoggedIn: false\r\n        });\r\n        setHomePage(false);\r\n        setProfilePage(false);\r\n        setExplorePage(false);\r\n        setOtherUserPage({\r\n            isOtherPage:false\r\n        })\r\n        setTweetDetailsPage({\r\n            isTweetDetailsPage:false\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li><Home setHomePage={setHomePage} setExplorePage={setExplorePage}setProfilePage={setProfilePage} \r\n                setOtherUserPage={setOtherUserPage} setTweetDetailsPage={setTweetDetailsPage}></Home></li>\r\n                <li><Explore setHomePage={setHomePage} setExplorePage={setExplorePage}setProfilePage={setProfilePage} \r\n                setOtherUserPage={setOtherUserPage} setTweetDetailsPage={setTweetDetailsPage}></Explore></li>\r\n                <li><Profile setHomePage={setHomePage} setExplorePage={setExplorePage}setProfilePage={setProfilePage} \r\n                setOtherUserPage={setOtherUserPage} setTweetDetailsPage={setTweetDetailsPage}></Profile></li>\r\n                <li><Logout onLogout={ logout } setError={ setError }/></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Options;","import React from 'react';\r\nimport {updateLikes, fetchAllTweets, fetchUserSpecificTweets,fetchUserTweets,deleteTweet} from './services';\r\n\r\nconst TweetDisplay = ({isProfilePage,setUserState, setTweetDetailsPage, otherUserPage, \r\n    isExplorePage, userState, tweets, setAllTweets, setError, setHomePage, setProfilePage, \r\n    setExplorePage,setOtherUserPage}) => {\r\n\r\n    const changeLikes = (e) => {\r\n        updateLikes(e.target.dataset.id)\r\n        .then( ()=> {\r\n            if(isExplorePage){\r\n                fetchAllTweets()\r\n                .then( tweetList => {\r\n                    setAllTweets(tweetList);\r\n                })\r\n            }else if(otherUserPage.isOtherPage){\r\n                fetchUserSpecificTweets(otherUserPage.otherUser)\r\n                .then(tweetList => {\r\n                    setAllTweets(tweetList);\r\n                })\r\n            }else if(isProfilePage){\r\n                fetchUserSpecificTweets(userState.id)\r\n                .then(tweetList => {\r\n                    setAllTweets(tweetList);\r\n                })\r\n            }else{\r\n                fetchUserTweets(userState.id)\r\n                .then(tweetList => {\r\n                    setAllTweets(tweetList);\r\n                })\r\n            }\r\n        })\r\n        .catch( err => {\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);\r\n                setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const deleteGiven = (e) => {\r\n        deleteTweet(e.target.dataset.id)\r\n        .then( ()=> {\r\n            if(isExplorePage){\r\n                fetchAllTweets()\r\n                .then( tweetList => {\r\n                    setAllTweets(tweetList);\r\n                })\r\n            }else if(otherUserPage.isOtherPage){\r\n                fetchUserSpecificTweets(otherUserPage.otherUser)\r\n                .then(tweetList => {\r\n                    setAllTweets(tweetList);\r\n                })\r\n            }else if(isProfilePage){\r\n                fetchUserSpecificTweets(userState.id)\r\n                .then(tweetList => {\r\n                    setAllTweets(tweetList);\r\n                })\r\n            }else{\r\n                fetchUserTweets(userState.id)\r\n                .then(tweetList => {\r\n                    setAllTweets(tweetList);\r\n                })\r\n            }\r\n        })\r\n        .catch( err => {\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);\r\n                setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const changePage = (e) => {\r\n        const otherUser = e.target.dataset.id;\r\n        const self = userState.id;\r\n        if(otherUser == self){\r\n            setProfilePage(true);\r\n            setOtherUserPage({\r\n                isOtherPage:false,\r\n            });\r\n        }else{\r\n            setOtherUserPage({\r\n                isOtherPage:true,\r\n                otherUser: otherUser\r\n            });\r\n            setProfilePage(false);\r\n        }\r\n        setHomePage(false);\r\n        setExplorePage(false);\r\n        setTweetDetailsPage({\r\n            isTweetDetailsPage:false\r\n        })\r\n    }\r\n\r\n    const showDetails = (e) => {\r\n        e.preventDefault();\r\n        const tweetId = e.target.dataset.id;\r\n        if(e.target.className != \"name\" && e.target.className != \"time\" && e.target.className != \"likes\" && \r\n           e.target.className != \"delete\" && e.target.className != \"count\" && e.target.className != \"avatar-display\"){\r\n            setTweetDetailsPage({\r\n                isTweetDetailsPage:true,\r\n                tweetId:tweetId\r\n            });\r\n            setHomePage(false);\r\n            setExplorePage(false);\r\n            setProfilePage(false);\r\n            setOtherUserPage({\r\n                isOtherPage:false\r\n            });\r\n        }\r\n    }\r\n\r\n    const deleteButton = (tweet) => {\r\n        if(tweet.userId == userState.id){\r\n            return <button className=\"delete\" onClick={deleteGiven} data-id={tweet.tweetId}></button>\r\n        }\r\n    }\r\n    \r\n\r\n    const convertTime = (time) => {\r\n        const lapsed = (Date.now() - time)/1000;\r\n        if(lapsed < 60){\r\n            return Math.floor(lapsed) + 's';\r\n        }else if(lapsed >= 60 && lapsed < 3600){\r\n            return Math.floor(lapsed/60) + 'min';\r\n        }else if (lapsed >= 3600 && lapsed < 86400) {\r\n            return Math.floor(lapsed/3600) + 'h';\r\n        }else if(lapsed >= 86400 && lapsed < 31536000){\r\n            const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n            const date = new Date(time);\r\n            return  shortMonths[date.getMonth()] + \" \" + date.getDate();\r\n        }else{\r\n            const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n            const date = new Date(time);\r\n            return  shortMonths[date.getMonth()] + \" \" + date.getDate() + \" \" + date.getFullYear();\r\n        }\r\n    }\r\n\r\n    const tweetList = Object.values(tweets).map((tweet) => {\r\n        if(tweet){\r\n            return <li key={tweet.time + tweet.user} className=\"tweet-display\">\r\n                <a href={tweet.tweetId} onClick={showDetails} data-id={tweet.tweetId} className=\"main-header\">\r\n                    <div className=\"tweet-info\" data-id={tweet.tweetId}>\r\n                        <div className=\"tweet-data\" data-id={tweet.tweetId}>\r\n                            <div className=\"user-info\" data-id={tweet.tweetId}>\r\n                                <img src=\"/profile.png\" alt=\"avatar\" className=\"avatar-display\" data-id={tweet.userId} onClick={ changePage }></img>\r\n                                <span className=\"name\" data-id={tweet.userId} onClick={ changePage } >{tweet.user}</span>\r\n                                <span className=\"time\">{convertTime(tweet.time)}</span>\r\n                            </div>\r\n                            <p className=\"tweet\" data-id={tweet.tweetId}>{tweet.tweet}</p>\r\n                        </div>\r\n                        <div className=\"comments\">\r\n                            <div className=\"like\">\r\n                                <button className=\"likes\" onClick={changeLikes} data-id={tweet.tweetId}></button>\r\n                                <label className=\"count\">{tweet.likes}</label>\r\n                            </div>    \r\n                            {deleteButton(tweet)}   \r\n                        </div>\r\n                    </div>\r\n                </a>\r\n            </li>\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"tweet-panel\">\r\n            <ul className=\"tweets\">{tweetList}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TweetDisplay;","import React, {useState, useEffect} from 'react';\r\nimport Options from './Options';\r\nimport {fetchUserTweets, postTweet} from './services';\r\nimport TweetDisplay from './TweetDisplay';\r\n\r\nconst HomePage = ({isProfilePage, setTweetDetailsPage,otherUserPage, isExplorePage, userState, setUserState, \r\n    setError, setHomePage, setProfilePage, setExplorePage, setOtherUserPage}) => {\r\n    const [tweet, setTweet] = useState('');\r\n    const [allTweets, setAllTweets] = useState([]);\r\n\r\n    const getTweets = () => {\r\n        fetchUserTweets(userState.id)\r\n        .then( tweetsList => {\r\n            setAllTweets(tweetsList);\r\n            setError('');\r\n        })\r\n        .catch(err =>{\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);\r\n                setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        });\r\n    };\r\n\r\n    const addTweet = () => {\r\n        if(tweet){\r\n            postTweet(tweet)\r\n            .then( tweetsList => {\r\n                setAllTweets(tweetsList);\r\n                setTweet('');\r\n                setError('');\r\n            })\r\n            .catch(err => {\r\n                setError(err.error);\r\n                if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                    setUserState({\r\n                        isLoggedIn: false\r\n                    });\r\n                    setHomePage(false);\r\n                    setExplorePage(false);\r\n                    setProfilePage(false);\r\n                    setOtherUserPage({\r\n                        isOtherPage:false\r\n                    })\r\n                    setTweetDetailsPage({\r\n                        isTweetDetailsPage:false\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const input = (e) => {\r\n        setTweet(e.target.value);\r\n    }\r\n\r\n    useEffect( () => {\r\n        const interval = setInterval( () => {\r\n            getTweets();\r\n        }, 2500);\r\n        setError('');\r\n        return function cleanUp(){\r\n            clearInterval(interval);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"home-page\">\r\n            <div className=\"options\">\r\n                <Options setUserState={setUserState} setError={ setError } setHomePage={setHomePage} \r\n                setProfilePage={setProfilePage} setExplorePage={setExplorePage} setOtherUserPage={setOtherUserPage} \r\n                setTweetDetailsPage={setTweetDetailsPage}/>\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"input-container\">\r\n                    <img src=\"/profile.png\" alt=\"avatar\" className=\"avatar\"></img>\r\n                    <textarea className=\"input\" placeholder=\"What's happening?\" onChange={input} value={tweet} maxLength=\"250\"></textarea>\r\n                    <br/>\r\n                    <button className=\"submit\" onClick={addTweet} disabled={!tweet}>Zweet</button>\r\n                </div>\r\n                <TweetDisplay isProfilePage={isProfilePage} setUserState={setUserState} setTweetDetailsPage={setTweetDetailsPage} \r\n                otherUserPage={otherUserPage} isExplorePage={isExplorePage} userState={userState} tweets={allTweets} \r\n                setAllTweets={setAllTweets} setError={setError} setHomePage={setHomePage} setProfilePage={setProfilePage} \r\n                setExplorePage={setExplorePage} setOtherUserPage={setOtherUserPage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React, { useState, useEffect } from 'react';\r\nimport { fetchLogin } from './services';\r\n\r\nconst Login = ({ onLogin, setError }) => {\r\n    const [username, setUsername] = useState('');\r\n\r\n    const performLogin = () =>{\r\n        const name = username;\r\n        fetchLogin(name)\r\n        .then( userInfo => {\r\n            onLogin(userInfo);\r\n        })\r\n        .catch( (err) =>{\r\n            setError(err.error);\r\n        });\r\n    };\r\n\r\n    useEffect( () => {\r\n        setError('');\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <img src=\"/header.png\" alt=\"logo\" className=\"header\"></img>\r\n            <h2 className=\"title\">Log in to Zwitter</h2> \r\n            <input className=\"user-name\" onChange={ (e) => setUsername(e.target.value)} placeholder=\"Enter name\"/>\r\n            <br/>\r\n            <button className=\"add-user\" onClick={ performLogin }>Log in</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","import React, { useEffect, useState } from 'react';\r\nimport Options from './Options';\r\nimport {fetchProfileDetails, fetchUserSpecificTweets} from './services';\r\nimport TweetDisplay from './TweetDisplay';\r\n\r\nconst ProfilePage = ({isProfilePage,setTweetDetailsPage, otherUserPage, isExplorePage, userState, setUserState, \r\n    setError, setHomePage, setProfilePage, setExplorePage, setOtherUserPage}) => {\r\n    const [profileDetails, setProfileDetails] = useState([]);\r\n    const [tweets, setAllTweets] = useState([]);\r\n\r\n    const getProfileDetails = () => {\r\n        fetchProfileDetails(userState.id)\r\n        .then(profile => {\r\n            setProfileDetails(profile);\r\n            fetchUserSpecificTweets(userState.id)\r\n            .then( tweetsList =>{\r\n                setAllTweets(tweetsList);\r\n            })\r\n        })\r\n        .catch(err =>{\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);\r\n                setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect( () => {\r\n        const interval = setInterval( () => {\r\n            getProfileDetails();\r\n        }, 2500);\r\n        setError('');\r\n        return function cleanUp(){\r\n            clearInterval(interval);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"home-page\">\r\n            <div className=\"options\">\r\n                <Options setUserState={setUserState} setError={ setError } setHomePage={setHomePage} setProfilePage={setProfilePage} \r\n                setExplorePage={setExplorePage} setOtherUserPage={setOtherUserPage}setTweetDetailsPage={setTweetDetailsPage}></Options>\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"profile-info\">\r\n                    <img src=\"/profile.png\" alt=\"avatar\" className=\"avatar\"></img>\r\n                    <span className=\"name\">{profileDetails.name}</span>\r\n                    <br/>\r\n                    <span className=\"follow\">{(!profileDetails.following || !profileDetails.following.length) ? 0 : profileDetails.following.length}</span> \r\n                    <label className=\"text\">Following</label>\r\n                    <span className=\"follow\">{(!profileDetails.followers || !profileDetails.followers.length) ? 0 : profileDetails.followers.length}</span>\r\n                    <label>Followers</label>\r\n                </div>\r\n                <div>\r\n                    <TweetDisplay isProfilePage={isProfilePage} setUserState={setUserState} setTweetDetailsPage={setTweetDetailsPage} \r\n                    otherUserPage={otherUserPage} isExplorePage={isExplorePage} userState={userState} tweets={tweets} \r\n                    setAllTweets={setAllTweets} setError={setError} setHomePage={setHomePage} setProfilePage={setProfilePage} \r\n                    setExplorePage={setExplorePage} setOtherUserPage={setOtherUserPage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfilePage;","import React, { useState,useEffect} from 'react';\r\nimport Options from './Options';\r\nimport TweetDisplay from './TweetDisplay';\r\nimport {fetchAllTweets} from './services';\r\n\r\nconst ExplorePage = ({isProfilePage,setTweetDetailsPage, otherUserPage, isExplorePage, userState, setUserState, \r\n    setError, setHomePage, setProfilePage, setExplorePage, setOtherUserPage}) => {\r\n    const [tweets, setAllTweets] = useState([]);\r\n\r\n    const getTweets = () => {\r\n        fetchAllTweets()\r\n        .then( tweetsList =>{\r\n            setAllTweets(tweetsList);\r\n        })\r\n        .catch( err=>{\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);\r\n                setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect( () => {\r\n        const interval = setInterval( () => {\r\n            getTweets();\r\n        }, 2500);\r\n        setError('');\r\n        return function cleanUp(){\r\n            clearInterval(interval);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"home-page\">\r\n            <div className=\"options\">\r\n                <Options setUserState={setUserState} setError={ setError } setHomePage={setHomePage} \r\n                setProfilePage={setProfilePage} setExplorePage={setExplorePage} setOtherUserPage={setOtherUserPage} \r\n                setTweetDetailsPage={setTweetDetailsPage}></Options>\r\n            </div>\r\n            <div className=\"container\">\r\n                <TweetDisplay isProfilePage={isProfilePage} setUserState={setUserState} setTweetDetailsPage={setTweetDetailsPage} \r\n                otherUserPage={otherUserPage} isExplorePage={isExplorePage} userState={userState} tweets={tweets} \r\n                setAllTweets={setAllTweets} setError={setError} setHomePage={setHomePage} setProfilePage={setProfilePage} \r\n                setExplorePage={setExplorePage} setOtherUserPage={setOtherUserPage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExplorePage;","import React, {useState,useEffect} from 'react';\r\nimport Options from './Options';\r\nimport { fetchTweet, updateLikes, deleteTweet } from './services';\r\n\r\nconst TweetDetailsPage = ({tweetDetailsPage, setTweetDetailsPage, userState, setUserState, setError, \r\n    setHomePage, setProfilePage, setExplorePage, setOtherUserPage}) => {\r\n    const [tweetInfo, setTweetInfo] = useState([]);\r\n\r\n    const getTweetDetails = () => {\r\n        fetchTweet(tweetDetailsPage.tweetId)\r\n        .then( tweet => {\r\n            setTweetInfo(tweet);\r\n        })\r\n        .catch( err => {\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);\r\n                setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const changeLikes = (e) => {\r\n        updateLikes(e.target.dataset.id)\r\n        .then( ()=> {\r\n            fetchTweet(tweetDetailsPage.tweetId)\r\n            .then( tweet => {\r\n                setTweetInfo(tweet);\r\n            })\r\n        })\r\n        .catch( err => {\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);\r\n                setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const deleteGiven = (e) => {\r\n        deleteTweet(e.target.dataset.id)\r\n        .then( ()=> {\r\n            setProfilePage(true);\r\n            setExplorePage(false);\r\n            setHomePage(false);\r\n            setOtherUserPage({\r\n                isOtherPage:false\r\n            })\r\n            setTweetDetailsPage({\r\n                isTweetDetailsPage:false\r\n            })\r\n        })\r\n        .catch( err => {\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);\r\n                setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const changePage = (e) => {\r\n        const otherUser = e.target.dataset.id;\r\n        const self = userState.id;\r\n        if(otherUser == self){\r\n            setProfilePage(true);\r\n            setOtherUserPage({\r\n                isOtherPage:false,\r\n            });\r\n        }else{\r\n            setOtherUserPage({\r\n                isOtherPage:true,\r\n                otherUser: otherUser\r\n            });\r\n            setProfilePage(false);\r\n        }\r\n        setHomePage(false);\r\n        setExplorePage(false);\r\n        setTweetDetailsPage({\r\n            isTweetDetailsPage:false\r\n        })\r\n    }\r\n\r\n    const deleteButton = (tweet) => {\r\n        if(tweet.userId == userState.id){\r\n            return <button className=\"delete\" onClick={deleteGiven} data-id={tweet.tweetId}></button>\r\n        }\r\n    }\r\n    \r\n\r\n    const convertTime = ( time) => {\r\n        const lapsed = (Date.now() - time)/1000;\r\n        if(lapsed < 60){\r\n            return Math.floor(lapsed) + 's';\r\n        }else if(lapsed >= 60 && lapsed < 3600){\r\n            return Math.floor(lapsed/60) + 'min';\r\n        }else if (lapsed >= 3600 && lapsed < 86400) {\r\n            return Math.floor(lapsed/3600) + 'h';\r\n        }else if(lapsed >= 86400 && lapsed < 31536000){\r\n            const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n            const date = new Date(time);\r\n            return  shortMonths[date.getMonth()] + \" \" + date.getDate();\r\n        }else{\r\n            const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n            const date = new Date(time);\r\n            return  shortMonths[date.getMonth()] + \" \" + date.getDate() + \" \" + date.getFullYear();\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        getTweetDetails();\r\n        setError('');\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"home-page\">\r\n            <div className=\"options\">\r\n                <Options setUserState={setUserState} setError={ setError } setHomePage={setHomePage} setProfilePage={setProfilePage} setExplorePage={setExplorePage} setOtherUserPage={setOtherUserPage} setTweetDetailsPage={setTweetDetailsPage}/>\r\n            </div>\r\n            <div className=\"tweet-container\">\r\n                <div className=\"tweet-data\">\r\n                    <div className=\"user-info\">\r\n                        <img src=\"/profile.png\" alt=\"avatar\" className=\"avatar-display\" data-id={tweetInfo.userId} onClick={ changePage }></img>\r\n                        <span className=\"name\" data-id={tweetInfo.userId} onClick={ changePage } >{tweetInfo.user}</span>\r\n                        <span className=\"time\">{convertTime(tweetInfo.time)}</span>\r\n                    </div>\r\n                    <p className=\"tweet\">{tweetInfo.tweet}</p>\r\n                </div>\r\n                <div className=\"meta-info\">\r\n                    <span className=\"follow\">{tweetInfo.likes}</span>\r\n                    <label className=\"text\">Likes</label>\r\n                </div>    \r\n                <div className=\"comments\">\r\n                    <div className=\"like\">\r\n                        <button className=\"likes\" onClick={changeLikes} data-id={tweetInfo.tweetId}></button>\r\n                        <label className=\"count\">{tweetInfo.likes}</label>\r\n                    </div>    \r\n                    {deleteButton(tweetInfo)}   \r\n                </div>\r\n            </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default TweetDetailsPage;","import React, {useState, useEffect} from 'react';\r\nimport {fetchProfileDetails, fetchUserSpecificTweets,updateFollowStatus} from './services';\r\nimport Options from './Options';\r\nimport TweetDisplay from './TweetDisplay';\r\n\r\nconst OtherUserProfilePage = ({isProfilePage,setTweetDetailsPage,isExplorePage,otherUserPage,userState, setUserState, \r\n    setError, setHomePage, setProfilePage, setExplorePage, setOtherUserPage}) => {\r\n    const [userDetails, setuserDetails] = useState([]);\r\n    const [tweets, setAllTweets] = useState([]);\r\n\r\n    const getProfileDetails = () => {\r\n        fetchProfileDetails(otherUserPage.otherUser)\r\n        .then( profile =>{\r\n            setuserDetails(profile);\r\n            fetchUserSpecificTweets(otherUserPage.otherUser)\r\n            .then(tweetsList =>{\r\n                setAllTweets(tweetsList);\r\n            })\r\n        })\r\n        .catch( err=> {\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const changeStatus = () => {\r\n        updateFollowStatus(otherUserPage.otherUser)\r\n        .then( userInfo => {\r\n            setuserDetails(userInfo);\r\n            fetchUserSpecificTweets(otherUserPage.otherUser)\r\n            .then(tweetsList => {\r\n                setAllTweets(tweetsList);\r\n                \r\n            })\r\n        })\r\n        .catch( err => {\r\n            setError(err.error);\r\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\r\n                setUserState({\r\n                    isLoggedIn: false\r\n                });\r\n                setHomePage(false);\r\n                setExplorePage(false);\r\n                setProfilePage(false);\r\n                setOtherUserPage({\r\n                    isOtherPage:false\r\n                })\r\n                setTweetDetailsPage({\r\n                    isTweetDetailsPage:false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect( () => {\r\n        const interval = setInterval( () => {\r\n            getProfileDetails();\r\n        }, 2500);\r\n        setError('');\r\n        return function cleanUp(){\r\n            clearInterval(interval);\r\n        }\r\n    }, []);\r\n    return (\r\n        <div className=\"home-page\">\r\n            <div className=\"options\">\r\n                <Options setUserState={setUserState} setError={ setError } setHomePage={setHomePage} setProfilePage={setProfilePage} setExplorePage={setExplorePage} \r\n                setOtherUserPage={setOtherUserPage} setTweetDetailsPage={setTweetDetailsPage}></Options>\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"profile-info\">\r\n                    <img src=\"/profile.png\" alt=\"avatar\" className=\"avatar\"></img>\r\n                    <span className=\"name\">{userDetails.name}</span>\r\n                    <br/>\r\n                    <span className=\"follow\" data-id={userDetails.id}>{(!userDetails.following || !userDetails.following.length) ? 0 : userDetails.following.length}</span> \r\n                    <label className=\"text\" data-id={userDetails.id}>Following</label>\r\n                    <span className=\"follow\">{(!userDetails.followers || !userDetails.followers.length) ? 0 : userDetails.followers.length}</span>\r\n                    <label data-id={userDetails.id}>Followers</label>\r\n                    <button className=\"to-follow\" onClick={changeStatus}> {userDetails.followers && userDetails.followers.includes(userState.id) ? \"Following\" : \"Follow\"}</button>\r\n                </div>\r\n                <div>\r\n                    <TweetDisplay isProfilePage={isProfilePage} setUserState={setUserState} setTweetDetailsPage={setTweetDetailsPage} \r\n                    otherUserPage={otherUserPage} isExplorePage={isExplorePage} userState={userState} tweets={tweets} \r\n                    setAllTweets={setAllTweets} setError={setError} setHomePage={setHomePage} setProfilePage={setProfilePage} \r\n                    setExplorePage={setExplorePage} setOtherUserPage={setOtherUserPage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OtherUserProfilePage;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {fetchLoginStatus} from './services';\nimport HomePage from './HomePage';\nimport Login from './Login';\nimport ProfilePage from './ProfilePage';\nimport ExplorePage from './ExplorePage';\nimport TweetDetailsPage from './TweetDetailsPage';\nimport OtherUserProfilePage from './OtherUserProfilePage';\n\nfunction App() {\n  const [userState, setUserState] = useState({isLoggedIn : false});\n  const [error, setError] = useState('');\n  const [isHomePage, setHomePage] = useState(false);\n  const [isProfilePage, setProfilePage] = useState(false);\n  const [isExplorePage, setExplorePage] = useState(false);\n  const [otherUserPage, setOtherUserPage] = useState({isOtherPage:false});\n  const [tweetDetailsPage, setTweetDetailsPage] = useState({isTweetDetailsPage:false});\n\n  useEffect( () => {\n    fetchLoginStatus()\n    .then( (userInfo) =>{\n      setUserState({ \n        isLoggedIn: true,\n        username: userInfo.name,\n        id:userInfo.id\n      })\n      setHomePage(true);\n    })\n  }, []);\n\n  const login = (userInfo) =>{\n    setUserState({ \n      isLoggedIn: true,\n      username: userInfo.name,\n      id:userInfo.id\n    });\n    setHomePage(true);\n  };\n\n  if(isProfilePage){\n    return (\n      <div className=\"App\">\n        <ProfilePage isProfilePage={isProfilePage} setTweetDetailsPage={setTweetDetailsPage} otherUserPage={otherUserPage} \n           isExplorePage={isExplorePage} userState={userState} setUserState={ setUserState } setError={ setError } \n           setHomePage={setHomePage} setProfilePage={setProfilePage} setExplorePage={setExplorePage} \n           setOtherUserPage={setOtherUserPage}></ProfilePage>\n        <p className =\"status\">{ error }</p>\n      </div>\n    );\n  }else if(isExplorePage){\n    return (\n      <div className=\"App\">\n        <ExplorePage isProfilePage={isProfilePage} setTweetDetailsPage={setTweetDetailsPage} otherUserPage={otherUserPage} \n            isExplorePage={isExplorePage} userState={userState} setUserState={ setUserState } setError={ setError } \n            setHomePage={setHomePage} setProfilePage={setProfilePage} setExplorePage={setExplorePage} \n            setOtherUserPage={setOtherUserPage}></ExplorePage>\n        <p className =\"status\">{ error }</p>\n      </div>\n    );\n  }else if(isHomePage){\n    return (\n      <div className=\"App\">\n        <HomePage isProfilePage={isProfilePage} setTweetDetailsPage={setTweetDetailsPage} otherUserPage={otherUserPage} \n        isExplorePage={isExplorePage} userState={userState} setUserState={ setUserState } setError={ setError } \n        setHomePage={setHomePage} setProfilePage={setProfilePage} setExplorePage={setExplorePage} \n        setOtherUserPage={setOtherUserPage}/>\n        <p className =\"status\">{ error }</p>\n      </div>\n    );\n  }else if(otherUserPage.isOtherPage){\n    return (\n      <div className=\"App\">\n        <OtherUserProfilePage isProfilePage={isProfilePage} setTweetDetailsPage={setTweetDetailsPage} \n           isExplorePage={isExplorePage} otherUserPage={otherUserPage} userState={userState} setUserState={setUserState} \n           setError={setError} setHomePage={setHomePage} setProfilePage={setProfilePage} setExplorePage={setExplorePage} \n           setOtherUserPage={setOtherUserPage}/>\n        <p className =\"status\">{ error }</p>\n      </div>\n    );\n  }else if(tweetDetailsPage.isTweetDetailsPage){\n    return (\n      <div className=\"App\">\n        <TweetDetailsPage tweetDetailsPage={tweetDetailsPage} setTweetDetailsPage={setTweetDetailsPage} \n           userState={userState} setUserState={ setUserState } setError={ setError } setHomePage={setHomePage} \n           setProfilePage={setProfilePage} setExplorePage={setExplorePage} setOtherUserPage={setOtherUserPage}/>\n        <p className=\"status\">{error}</p>\n      </div>\n    );\n  }else{\n    return (\n      <div className=\"App\">\n        <Login onLogin={ login } setError={ setError }/>\n        <p className =\"status\">{ error }</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}